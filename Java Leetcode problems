1. Product of Array Except Self
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
 
    int[] t1 = new int[nums.length];
    int[] t2 = new int[nums.length];
 
    t1[0]=1;
    t2[nums.length-1]=1;
 
    //scan from left to right
    for(int i=0; i<nums.length-1; i++){
        t1[i+1] = nums[i] * t1[i];
    }
 
    //scan from right to left
    for(int i=nums.length-1; i>0; i--){
        t2[i-1] = t2[i] * nums[i];
    }
 
    //multiply
    for(int i=0; i<nums.length; i++){
        result[i] = t1[i] * t2[i];
    }
 
    return result;
    }
}


2. Contains Duplicate
class Solution {
    public boolean containsDuplicate(int[] nums) {
       if(nums==null || nums.length==0)
        return false;
 
    HashSet<Integer> set = new HashSet<Integer>();
    for(int i: nums){
        if(!set.add(i)){
            return true;
        }
    }
 
    return false; 
    }
}


3. Climbing Stairs
lass Solution {
    public int climbStairs(int n) {
         if (n == 0) return 0;
        if (n == 1) return 1;
        if (n == 2) return 2;
        int[] steps = new int[n + 1];
        steps[0] = 0;
        steps[1] = 1;
        steps[2] = 2;
        for (int i = 3; i < n + 1; i++) {
            steps[i] = steps[i - 1] + steps[i - 2];
        }
        return steps[n];
    }
}


4. Minimum Path Sum
class Solution {
    public int minPathSum(int[][] grid) {
        final int m = grid.length;
    final int n = grid[0].length;

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (i > 0 && j > 0)
          grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
        else if (i > 0)
          grid[i][0] += grid[i - 1][0];
        else if (j > 0)
          grid[0][j] += grid[0][j - 1];

    return grid[m - 1][n - 1];
    }
}


5. Maximum Subarray
class Solution {
    public int maxSubArray(int[] nums) {
       int result = nums[0];
    int[] sum =  new int[nums.length];
    sum[0] = nums[0];
 
    for(int i=1; i<nums.length; i++){
        sum[i] = Math.max(nums[i], sum[i-1] + nums[i]);
        result = Math.max(result, sum[i]);
    }
 
    return result; 
    }
}


6. 3Sum
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       List<List<Integer>> result = new ArrayList<>();
        if(nums.length < 3) return result;
        Arrays.sort(nums);
        int i = 0;
        while(i < nums.length - 2) {
            if(nums[i] > 0) break;
            int j = i + 1;
            int k = nums.length - 1;
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0) result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                if(sum <= 0) while(nums[j] == nums[++j] && j < k);
                if(sum >= 0) while(nums[k--] == nums[k] && j < k);
            }
            while(nums[i] == nums[++i] && i < nums.length - 2);
        }
        return result;
  }
}


7. Search Insert Position
class Solution {
    public int searchInsert(int[] nums, int target) {
    int start=0;
        int end=nums.length-1;
        while(start<=end)
        {
            int mid=(start+end)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
           else if(nums[mid]<target)
            {
                start=mid+1;
            }
           else
            {
                end=mid-1;
            }
        }
        return start;
    }
}


8. Remove Element
class Solution {
    public int removeElement(int[] nums, int val) {
        int count = 0;
        for(int i = 0 ; i < nums.length ; i++){
            if (nums[i]!= val){
                nums[count] = nums[i];
                count++;
            }
        }
        return count;
    }
}


9. Remove Duplicates from Sorted Array
class Solution {
    public int removeDuplicates(int[] nums) {
        int j = 0;
        for(int i = 0 ; i < nums.length ; i++){
            if (nums[j]!=nums[i]){
                nums[++j] = nums[i];  
            }
        }
     return j+1; 
    }
}


10. Two Sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0 ; i < nums.length ; i++){
             for(int j = i + 1 ; j < nums.length ; j++){
                 if (nums[i] + nums[j] == target ){
                     int a[] = {i , j};
                     return a;
                 }
             }
        }
        return null;
    }
}
11. 4sum
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();

        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                int k = j + 1, l = nums.length - 1;
                while (k < l) {
                    int current_sum = nums[i] + nums[j] + nums[k] + nums[l];
                    if (current_sum == target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        while (k < l && nums[k] == nums[k + 1]) k++;
                        while (k < l && nums[l] == nums[l - 1]) l--;
                        k++; l--;
                    } else if (current_sum > target) {
                        l--;
                    } else {
                        k++;
                    }
                }
            }
        }
        return result;
 
    }    
}
